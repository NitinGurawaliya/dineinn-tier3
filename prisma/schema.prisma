// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id               Int              @id @default(autoincrement())
  name             String
  email            String           @unique
  password         String

  restaurantDetail RestaurantDetail?
}

model RestaurantDetail {
  id              Int        @id @default(autoincrement())
  restaurantName  String     @unique
  subdomain       String     @unique
  contactNumber   String?
  location        String
  weekendWorking  String?
  weekdaysWorking String?
  logo            String?
  instagram       String?
  facebook        String?
  qrScans        Int         @default(0)
  userId          Int        @unique
  user            User       @relation(fields: [userId], references: [id])

  rating      RestaurantRating[]
  galleryImages   RestaurantGallery[]
  categories      Category[]
  dishes          Dishes[]  
  announcements   Announcement[]
  customer        Customer []
  dailyQrScans    DailyQRScan[]
  orders          Order[]
  // polls           Poll[]
}

model RestaurantRating{
  id          Int @id @default(autoincrement())
  rating      Int 
  message     String? 
  restaurantId Int
  createdAt     DateTime @default(now())

  restaurant    RestaurantDetail @relation(fields: [restaurantId], references: [id])
}

model RestaurantGallery{
  id            Int     @id @default(autoincrement())
  restaurantId  Int      
  imageUrl      String
  restaurant    RestaurantDetail   @relation(fields: [restaurantId],references: [id])
}

model Category {
  id            Int        @id @default(autoincrement())
  name          String
  restaurantId  Int
  restaurant    RestaurantDetail @relation(fields: [restaurantId], references: [id])

  dishes        Dishes[]
}

model Dishes {
  id              Int         @id @default(autoincrement())
  name            String
  price           Float
  image           String?   
  description      String   @default("no description")
  type            DishType @default(VEG)
  categoryId      Int
  restaurantId    Int        
  restaurant      RestaurantDetail @relation(fields: [restaurantId], references: [id])
  category        Category     @relation(fields: [categoryId], references: [id])
  views          DishView[]
  viewsCount     Int         @default(0) // running total of views
  orderItems     OrderItem[]
}

model Announcement {
  id              Int               @id @default(autoincrement())
  title           String
  content         String
  createdAt       DateTime          @default(now())
  restaurantId    Int
  restaurant      RestaurantDetail  @relation(fields: [restaurantId], references: [id])
}

model Customer{
  id              Int       @id @default(autoincrement())
  name            String
  mobile          String    @unique
  email           String?    
  DOB             DateTime?

  restaurant      RestaurantDetail[]
  orders          Order[]

}



enum DishType {
  VEG
  NON_VEG
}

model DishView{
  id      Int    @id @default(autoincrement())
  dishId  Int
  timestamp DateTime @default(now()) 
  dish    Dishes   @relation(fields: [dishId],references: [id],onDelete: Cascade)
}

model DailyQRScan {
  id            Int      @id @default(autoincrement())
  restaurantId  Int
  scanDate      DateTime @db.Date // Store only the date part
  scanCount     Int      @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  restaurant    RestaurantDetail @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  @@unique([restaurantId, scanDate]) // Ensure one record per restaurant per day
}

// --- Orders for table-ordering system ---

enum OrderStatus {
  PLACED
  ACCEPTED
  IN_PROGRESS
  READY
  SERVED
  CANCELLED
}

model Order {
  id            String           @id @default(cuid())
  restaurantId  Int
  sessionId     String?
  customerId    Int?
  tableNo       String
  status        OrderStatus      @default(PLACED)
  subtotal      Decimal          @db.Decimal(10,2)
  tax           Decimal          @db.Decimal(10,2)
  total         Decimal          @db.Decimal(10,2)
  notes         String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  restaurant    RestaurantDetail @relation(fields: [restaurantId], references: [id])
  customer      Customer?        @relation(fields: [customerId], references: [id])
  items         OrderItem[]

  @@index([restaurantId])
  @@index([sessionId])
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  dishId      Int
  nameSnapshot String
  priceSnapshot Decimal @db.Decimal(10,2)
  quantity    Int
  lineTotal   Decimal @db.Decimal(10,2)

  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  dish        Dishes  @relation(fields: [dishId], references: [id])

  @@index([orderId])
  @@index([dishId])
}

























// model Poll {
//   id              Int               @id @default(autoincrement())
//   question        String
//   createdAt       DateTime          @default(now())
//   expiresAt       DateTime
//   restaurantId    Int
//   restaurant      RestaurantDetail  @relation(fields: [restaurantId], references: [id])
//   options         PollOption[]
//   votes           PollVote[]
// }

// model PollOption {
//   id         Int      @id @default(autoincrement())
//   text       String
//   pollId     Int
//   poll       Poll     @relation(fields: [pollId], references: [id])
//   votes      PollVote[]
// }

// model PollVote {
//   id         Int        @id @default(autoincrement())
//   optionId   Int
//   pollId     Int                     
//   poll       Poll       @relation(fields: [pollId], references: [id]) 
//   pollOption PollOption @relation(fields: [optionId], references: [id])
//   voterEmail String
//   createdAt  DateTime   @default(now())
// }